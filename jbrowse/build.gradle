import org.labkey.gradle.util.BuildUtils;

repositories {
	mavenCentral()
	// Added for jhdf5 from FASTQC / sequence analysis module
	maven {
		url "https://maven.scijava.org/content/repositories/public/"
	}
}

dependencies {
    apiImplementation "com.github.samtools:htsjdk:${htsjdkVersion}"
	BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "apiJarFile")
	BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:DiscvrLabKeyModules:SequenceAnalysis", depProjectConfig: "apiJarFile")
	BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:DiscvrLabKeyModules:SequenceAnalysis", depProjectConfig: "runtimeElements")
	BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "apiJarFile")

    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:DiscvrLabKeyModules:SequenceAnalysis", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "pipeline"), depProjectConfig: "published", depExtension: "module")

	external "org.apache.lucene:lucene-analysis-common:${luceneVersion}"
	external "org.apache.lucene:lucene-core:${luceneVersion}"
	external "org.apache.lucene:lucene-queryparser:${luceneVersion}"
	external "org.apache.lucene:lucene-backward-codecs:${luceneVersion}"
}

def jbPkgTask = project.tasks.named("npm_run_jb-pkg")

jbPkgTask.configure {
    outputs.cacheIf {false}

    outputs.dir(project.file("./resources/external/jb-cli"))
}

project.tasks.named('processModuleResources').configure {
    dependsOn jbPkgTask
}

project.tasks.named("npm_run_build-prod").configure {
    finalizedBy jbPkgTask.get()
}

project.tasks.named("npm_run_build-dev").configure {
    finalizedBy jbPkgTask.get()
}
