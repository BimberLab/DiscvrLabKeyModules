import org.labkey.gradle.plugin.TeamCity
import org.labkey.gradle.plugin.extension.ServerDeployExtension
import org.labkey.gradle.plugin.extension.TeamCityExtension
import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.GroupNames
import org.labkey.gradle.util.PropertiesUtils

import java.util.regex.Matcher

repositories {
   mavenCentral()
   // Added for org.clojars.chapmanb:sam dependency required by com.github.samtools:htsjdk
   maven {
      url "https://clojars.org/repo"
   }
   // Added for org.clojars.chapmanb:sam
   maven {
      url "https://maven.scijava.org/content/groups/public"
   }
}

dependencies {
   apiImplementation "com.github.samtools:htsjdk:${htsjdkVersion}"
   external "com.github.samtools:htsjdk:${htsjdkVersion}"
   BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "apiJarFile")
   BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "apiJarFile")
   external 'org.biojava:biojava3-core:3.0.7'
   external 'org.biojava:biojava3-genome:3.0.7'
   external 'org.itadaki:bzip2:0.9.1'
   external 'org.clojars.chapmanb:sam:1.96'
   external "org.apache.commons:commons-math3:${commonsMath3Version}"
   implementation "net.sf.opencsv:opencsv:${opencsvVersion}"

   // picard brings in a version of servlet-api and a very old one at that, so we excluded it
   // Note: if changing this, we might need to match the htsjdk version set in gradle.properties
   external("com.github.broadinstitute:picard:2.22.4") {
      exclude group: "javax.servlet", module: "servlet-api"
      exclude group: "org.apache.commons", module: "commons-collections4"
   }

   external "commons-net:commons-net:${commonsNetVersion}"
   apiImplementation "org.apache.commons:commons-math3:${commonsMath3Version}"
   external "org.apache.commons:commons-math3:${commonsMath3Version}"
   BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "published", depExtension: "module")
   BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "published", depExtension: "module")
}

if (project.findProject(BuildUtils.getTestProjectPath(project.gradle)) != null && project.hasProperty("teamcity"))
{
   def testProject = project.findProject(BuildUtils.getTestProjectPath(project.gradle))
   def createPipelineConfigTask = project.tasks.register("createPipelineConfig", Copy) {
      Copy task ->
         task.group = GroupNames.TEST_SERVER
         task.description = "Create pipeline configs for running tests on the test server"
         task.from project.file("test/configs")
         task.include "pipelineConfig.xml"
         task.filter({ String line ->
            Matcher matcher = PropertiesUtils.PROPERTY_PATTERN.matcher(line)
            def extension = testProject.extensions.findByType(TeamCityExtension.class)
            String newLine = line
            while (matcher.find())
            {
               if (matcher.group(1).equals("SEQUENCEANALYSIS_TOOLS"))
                  newLine = newLine.replace(matcher.group(), extension.getTeamCityProperty("additional.pipeline.tools"))
            }
            return newLine

         })
         task.destinationDir = new File("${ServerDeployExtension.getServerDeployDirectory(project)}/config")
   }
   testProject.tasks.named("startTomcat").configure {
      dependsOn(createPipelineConfigTask)
   }
}
